// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Ghaarp/chat-server/internal/service.ServiceConverter -o service_converter_minimock.go -n ServiceConverterMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Ghaarp/chat-server/internal/service/chat/model"
	generated "github.com/Ghaarp/chat-server/pkg/chat_v1"
	"github.com/gojuno/minimock/v3"
)

// ServiceConverterMock implements mm_service.ServiceConverter
type ServiceConverterMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcToCreateRequest          func(req *generated.CreateRequest) (cp1 *model.CreateRequest)
	funcToCreateRequestOrigin    string
	inspectFuncToCreateRequest   func(req *generated.CreateRequest)
	afterToCreateRequestCounter  uint64
	beforeToCreateRequestCounter uint64
	ToCreateRequestMock          mServiceConverterMockToCreateRequest

	funcToSendMessageRequest          func(req *generated.SendMessageRequest) (sp1 *model.SendMessageRequest)
	funcToSendMessageRequestOrigin    string
	inspectFuncToSendMessageRequest   func(req *generated.SendMessageRequest)
	afterToSendMessageRequestCounter  uint64
	beforeToSendMessageRequestCounter uint64
	ToSendMessageRequestMock          mServiceConverterMockToSendMessageRequest
}

// NewServiceConverterMock returns a mock for mm_service.ServiceConverter
func NewServiceConverterMock(t minimock.Tester) *ServiceConverterMock {
	m := &ServiceConverterMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ToCreateRequestMock = mServiceConverterMockToCreateRequest{mock: m}
	m.ToCreateRequestMock.callArgs = []*ServiceConverterMockToCreateRequestParams{}

	m.ToSendMessageRequestMock = mServiceConverterMockToSendMessageRequest{mock: m}
	m.ToSendMessageRequestMock.callArgs = []*ServiceConverterMockToSendMessageRequestParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mServiceConverterMockToCreateRequest struct {
	optional           bool
	mock               *ServiceConverterMock
	defaultExpectation *ServiceConverterMockToCreateRequestExpectation
	expectations       []*ServiceConverterMockToCreateRequestExpectation

	callArgs []*ServiceConverterMockToCreateRequestParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ServiceConverterMockToCreateRequestExpectation specifies expectation struct of the ServiceConverter.ToCreateRequest
type ServiceConverterMockToCreateRequestExpectation struct {
	mock               *ServiceConverterMock
	params             *ServiceConverterMockToCreateRequestParams
	paramPtrs          *ServiceConverterMockToCreateRequestParamPtrs
	expectationOrigins ServiceConverterMockToCreateRequestExpectationOrigins
	results            *ServiceConverterMockToCreateRequestResults
	returnOrigin       string
	Counter            uint64
}

// ServiceConverterMockToCreateRequestParams contains parameters of the ServiceConverter.ToCreateRequest
type ServiceConverterMockToCreateRequestParams struct {
	req *generated.CreateRequest
}

// ServiceConverterMockToCreateRequestParamPtrs contains pointers to parameters of the ServiceConverter.ToCreateRequest
type ServiceConverterMockToCreateRequestParamPtrs struct {
	req **generated.CreateRequest
}

// ServiceConverterMockToCreateRequestResults contains results of the ServiceConverter.ToCreateRequest
type ServiceConverterMockToCreateRequestResults struct {
	cp1 *model.CreateRequest
}

// ServiceConverterMockToCreateRequestOrigins contains origins of expectations of the ServiceConverter.ToCreateRequest
type ServiceConverterMockToCreateRequestExpectationOrigins struct {
	origin    string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Optional() *mServiceConverterMockToCreateRequest {
	mmToCreateRequest.optional = true
	return mmToCreateRequest
}

// Expect sets up expected params for ServiceConverter.ToCreateRequest
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Expect(req *generated.CreateRequest) *mServiceConverterMockToCreateRequest {
	if mmToCreateRequest.mock.funcToCreateRequest != nil {
		mmToCreateRequest.mock.t.Fatalf("ServiceConverterMock.ToCreateRequest mock is already set by Set")
	}

	if mmToCreateRequest.defaultExpectation == nil {
		mmToCreateRequest.defaultExpectation = &ServiceConverterMockToCreateRequestExpectation{}
	}

	if mmToCreateRequest.defaultExpectation.paramPtrs != nil {
		mmToCreateRequest.mock.t.Fatalf("ServiceConverterMock.ToCreateRequest mock is already set by ExpectParams functions")
	}

	mmToCreateRequest.defaultExpectation.params = &ServiceConverterMockToCreateRequestParams{req}
	mmToCreateRequest.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmToCreateRequest.expectations {
		if minimock.Equal(e.params, mmToCreateRequest.defaultExpectation.params) {
			mmToCreateRequest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmToCreateRequest.defaultExpectation.params)
		}
	}

	return mmToCreateRequest
}

// ExpectReqParam1 sets up expected param req for ServiceConverter.ToCreateRequest
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) ExpectReqParam1(req *generated.CreateRequest) *mServiceConverterMockToCreateRequest {
	if mmToCreateRequest.mock.funcToCreateRequest != nil {
		mmToCreateRequest.mock.t.Fatalf("ServiceConverterMock.ToCreateRequest mock is already set by Set")
	}

	if mmToCreateRequest.defaultExpectation == nil {
		mmToCreateRequest.defaultExpectation = &ServiceConverterMockToCreateRequestExpectation{}
	}

	if mmToCreateRequest.defaultExpectation.params != nil {
		mmToCreateRequest.mock.t.Fatalf("ServiceConverterMock.ToCreateRequest mock is already set by Expect")
	}

	if mmToCreateRequest.defaultExpectation.paramPtrs == nil {
		mmToCreateRequest.defaultExpectation.paramPtrs = &ServiceConverterMockToCreateRequestParamPtrs{}
	}
	mmToCreateRequest.defaultExpectation.paramPtrs.req = &req
	mmToCreateRequest.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmToCreateRequest
}

// Inspect accepts an inspector function that has same arguments as the ServiceConverter.ToCreateRequest
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Inspect(f func(req *generated.CreateRequest)) *mServiceConverterMockToCreateRequest {
	if mmToCreateRequest.mock.inspectFuncToCreateRequest != nil {
		mmToCreateRequest.mock.t.Fatalf("Inspect function is already set for ServiceConverterMock.ToCreateRequest")
	}

	mmToCreateRequest.mock.inspectFuncToCreateRequest = f

	return mmToCreateRequest
}

// Return sets up results that will be returned by ServiceConverter.ToCreateRequest
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Return(cp1 *model.CreateRequest) *ServiceConverterMock {
	if mmToCreateRequest.mock.funcToCreateRequest != nil {
		mmToCreateRequest.mock.t.Fatalf("ServiceConverterMock.ToCreateRequest mock is already set by Set")
	}

	if mmToCreateRequest.defaultExpectation == nil {
		mmToCreateRequest.defaultExpectation = &ServiceConverterMockToCreateRequestExpectation{mock: mmToCreateRequest.mock}
	}
	mmToCreateRequest.defaultExpectation.results = &ServiceConverterMockToCreateRequestResults{cp1}
	mmToCreateRequest.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmToCreateRequest.mock
}

// Set uses given function f to mock the ServiceConverter.ToCreateRequest method
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Set(f func(req *generated.CreateRequest) (cp1 *model.CreateRequest)) *ServiceConverterMock {
	if mmToCreateRequest.defaultExpectation != nil {
		mmToCreateRequest.mock.t.Fatalf("Default expectation is already set for the ServiceConverter.ToCreateRequest method")
	}

	if len(mmToCreateRequest.expectations) > 0 {
		mmToCreateRequest.mock.t.Fatalf("Some expectations are already set for the ServiceConverter.ToCreateRequest method")
	}

	mmToCreateRequest.mock.funcToCreateRequest = f
	mmToCreateRequest.mock.funcToCreateRequestOrigin = minimock.CallerInfo(1)
	return mmToCreateRequest.mock
}

// When sets expectation for the ServiceConverter.ToCreateRequest which will trigger the result defined by the following
// Then helper
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) When(req *generated.CreateRequest) *ServiceConverterMockToCreateRequestExpectation {
	if mmToCreateRequest.mock.funcToCreateRequest != nil {
		mmToCreateRequest.mock.t.Fatalf("ServiceConverterMock.ToCreateRequest mock is already set by Set")
	}

	expectation := &ServiceConverterMockToCreateRequestExpectation{
		mock:               mmToCreateRequest.mock,
		params:             &ServiceConverterMockToCreateRequestParams{req},
		expectationOrigins: ServiceConverterMockToCreateRequestExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmToCreateRequest.expectations = append(mmToCreateRequest.expectations, expectation)
	return expectation
}

// Then sets up ServiceConverter.ToCreateRequest return parameters for the expectation previously defined by the When method
func (e *ServiceConverterMockToCreateRequestExpectation) Then(cp1 *model.CreateRequest) *ServiceConverterMock {
	e.results = &ServiceConverterMockToCreateRequestResults{cp1}
	return e.mock
}

// Times sets number of times ServiceConverter.ToCreateRequest should be invoked
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Times(n uint64) *mServiceConverterMockToCreateRequest {
	if n == 0 {
		mmToCreateRequest.mock.t.Fatalf("Times of ServiceConverterMock.ToCreateRequest mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmToCreateRequest.expectedInvocations, n)
	mmToCreateRequest.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmToCreateRequest
}

func (mmToCreateRequest *mServiceConverterMockToCreateRequest) invocationsDone() bool {
	if len(mmToCreateRequest.expectations) == 0 && mmToCreateRequest.defaultExpectation == nil && mmToCreateRequest.mock.funcToCreateRequest == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmToCreateRequest.mock.afterToCreateRequestCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmToCreateRequest.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ToCreateRequest implements mm_service.ServiceConverter
func (mmToCreateRequest *ServiceConverterMock) ToCreateRequest(req *generated.CreateRequest) (cp1 *model.CreateRequest) {
	mm_atomic.AddUint64(&mmToCreateRequest.beforeToCreateRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmToCreateRequest.afterToCreateRequestCounter, 1)

	mmToCreateRequest.t.Helper()

	if mmToCreateRequest.inspectFuncToCreateRequest != nil {
		mmToCreateRequest.inspectFuncToCreateRequest(req)
	}

	mm_params := ServiceConverterMockToCreateRequestParams{req}

	// Record call args
	mmToCreateRequest.ToCreateRequestMock.mutex.Lock()
	mmToCreateRequest.ToCreateRequestMock.callArgs = append(mmToCreateRequest.ToCreateRequestMock.callArgs, &mm_params)
	mmToCreateRequest.ToCreateRequestMock.mutex.Unlock()

	for _, e := range mmToCreateRequest.ToCreateRequestMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1
		}
	}

	if mmToCreateRequest.ToCreateRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmToCreateRequest.ToCreateRequestMock.defaultExpectation.Counter, 1)
		mm_want := mmToCreateRequest.ToCreateRequestMock.defaultExpectation.params
		mm_want_ptrs := mmToCreateRequest.ToCreateRequestMock.defaultExpectation.paramPtrs

		mm_got := ServiceConverterMockToCreateRequestParams{req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmToCreateRequest.t.Errorf("ServiceConverterMock.ToCreateRequest got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmToCreateRequest.ToCreateRequestMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmToCreateRequest.t.Errorf("ServiceConverterMock.ToCreateRequest got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmToCreateRequest.ToCreateRequestMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmToCreateRequest.ToCreateRequestMock.defaultExpectation.results
		if mm_results == nil {
			mmToCreateRequest.t.Fatal("No results are set for the ServiceConverterMock.ToCreateRequest")
		}
		return (*mm_results).cp1
	}
	if mmToCreateRequest.funcToCreateRequest != nil {
		return mmToCreateRequest.funcToCreateRequest(req)
	}
	mmToCreateRequest.t.Fatalf("Unexpected call to ServiceConverterMock.ToCreateRequest. %v", req)
	return
}

// ToCreateRequestAfterCounter returns a count of finished ServiceConverterMock.ToCreateRequest invocations
func (mmToCreateRequest *ServiceConverterMock) ToCreateRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmToCreateRequest.afterToCreateRequestCounter)
}

// ToCreateRequestBeforeCounter returns a count of ServiceConverterMock.ToCreateRequest invocations
func (mmToCreateRequest *ServiceConverterMock) ToCreateRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmToCreateRequest.beforeToCreateRequestCounter)
}

// Calls returns a list of arguments used in each call to ServiceConverterMock.ToCreateRequest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmToCreateRequest *mServiceConverterMockToCreateRequest) Calls() []*ServiceConverterMockToCreateRequestParams {
	mmToCreateRequest.mutex.RLock()

	argCopy := make([]*ServiceConverterMockToCreateRequestParams, len(mmToCreateRequest.callArgs))
	copy(argCopy, mmToCreateRequest.callArgs)

	mmToCreateRequest.mutex.RUnlock()

	return argCopy
}

// MinimockToCreateRequestDone returns true if the count of the ToCreateRequest invocations corresponds
// the number of defined expectations
func (m *ServiceConverterMock) MinimockToCreateRequestDone() bool {
	if m.ToCreateRequestMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ToCreateRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ToCreateRequestMock.invocationsDone()
}

// MinimockToCreateRequestInspect logs each unmet expectation
func (m *ServiceConverterMock) MinimockToCreateRequestInspect() {
	for _, e := range m.ToCreateRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceConverterMock.ToCreateRequest at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterToCreateRequestCounter := mm_atomic.LoadUint64(&m.afterToCreateRequestCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ToCreateRequestMock.defaultExpectation != nil && afterToCreateRequestCounter < 1 {
		if m.ToCreateRequestMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ServiceConverterMock.ToCreateRequest at\n%s", m.ToCreateRequestMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ServiceConverterMock.ToCreateRequest at\n%s with params: %#v", m.ToCreateRequestMock.defaultExpectation.expectationOrigins.origin, *m.ToCreateRequestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcToCreateRequest != nil && afterToCreateRequestCounter < 1 {
		m.t.Errorf("Expected call to ServiceConverterMock.ToCreateRequest at\n%s", m.funcToCreateRequestOrigin)
	}

	if !m.ToCreateRequestMock.invocationsDone() && afterToCreateRequestCounter > 0 {
		m.t.Errorf("Expected %d calls to ServiceConverterMock.ToCreateRequest at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ToCreateRequestMock.expectedInvocations), m.ToCreateRequestMock.expectedInvocationsOrigin, afterToCreateRequestCounter)
	}
}

type mServiceConverterMockToSendMessageRequest struct {
	optional           bool
	mock               *ServiceConverterMock
	defaultExpectation *ServiceConverterMockToSendMessageRequestExpectation
	expectations       []*ServiceConverterMockToSendMessageRequestExpectation

	callArgs []*ServiceConverterMockToSendMessageRequestParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ServiceConverterMockToSendMessageRequestExpectation specifies expectation struct of the ServiceConverter.ToSendMessageRequest
type ServiceConverterMockToSendMessageRequestExpectation struct {
	mock               *ServiceConverterMock
	params             *ServiceConverterMockToSendMessageRequestParams
	paramPtrs          *ServiceConverterMockToSendMessageRequestParamPtrs
	expectationOrigins ServiceConverterMockToSendMessageRequestExpectationOrigins
	results            *ServiceConverterMockToSendMessageRequestResults
	returnOrigin       string
	Counter            uint64
}

// ServiceConverterMockToSendMessageRequestParams contains parameters of the ServiceConverter.ToSendMessageRequest
type ServiceConverterMockToSendMessageRequestParams struct {
	req *generated.SendMessageRequest
}

// ServiceConverterMockToSendMessageRequestParamPtrs contains pointers to parameters of the ServiceConverter.ToSendMessageRequest
type ServiceConverterMockToSendMessageRequestParamPtrs struct {
	req **generated.SendMessageRequest
}

// ServiceConverterMockToSendMessageRequestResults contains results of the ServiceConverter.ToSendMessageRequest
type ServiceConverterMockToSendMessageRequestResults struct {
	sp1 *model.SendMessageRequest
}

// ServiceConverterMockToSendMessageRequestOrigins contains origins of expectations of the ServiceConverter.ToSendMessageRequest
type ServiceConverterMockToSendMessageRequestExpectationOrigins struct {
	origin    string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Optional() *mServiceConverterMockToSendMessageRequest {
	mmToSendMessageRequest.optional = true
	return mmToSendMessageRequest
}

// Expect sets up expected params for ServiceConverter.ToSendMessageRequest
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Expect(req *generated.SendMessageRequest) *mServiceConverterMockToSendMessageRequest {
	if mmToSendMessageRequest.mock.funcToSendMessageRequest != nil {
		mmToSendMessageRequest.mock.t.Fatalf("ServiceConverterMock.ToSendMessageRequest mock is already set by Set")
	}

	if mmToSendMessageRequest.defaultExpectation == nil {
		mmToSendMessageRequest.defaultExpectation = &ServiceConverterMockToSendMessageRequestExpectation{}
	}

	if mmToSendMessageRequest.defaultExpectation.paramPtrs != nil {
		mmToSendMessageRequest.mock.t.Fatalf("ServiceConverterMock.ToSendMessageRequest mock is already set by ExpectParams functions")
	}

	mmToSendMessageRequest.defaultExpectation.params = &ServiceConverterMockToSendMessageRequestParams{req}
	mmToSendMessageRequest.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmToSendMessageRequest.expectations {
		if minimock.Equal(e.params, mmToSendMessageRequest.defaultExpectation.params) {
			mmToSendMessageRequest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmToSendMessageRequest.defaultExpectation.params)
		}
	}

	return mmToSendMessageRequest
}

// ExpectReqParam1 sets up expected param req for ServiceConverter.ToSendMessageRequest
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) ExpectReqParam1(req *generated.SendMessageRequest) *mServiceConverterMockToSendMessageRequest {
	if mmToSendMessageRequest.mock.funcToSendMessageRequest != nil {
		mmToSendMessageRequest.mock.t.Fatalf("ServiceConverterMock.ToSendMessageRequest mock is already set by Set")
	}

	if mmToSendMessageRequest.defaultExpectation == nil {
		mmToSendMessageRequest.defaultExpectation = &ServiceConverterMockToSendMessageRequestExpectation{}
	}

	if mmToSendMessageRequest.defaultExpectation.params != nil {
		mmToSendMessageRequest.mock.t.Fatalf("ServiceConverterMock.ToSendMessageRequest mock is already set by Expect")
	}

	if mmToSendMessageRequest.defaultExpectation.paramPtrs == nil {
		mmToSendMessageRequest.defaultExpectation.paramPtrs = &ServiceConverterMockToSendMessageRequestParamPtrs{}
	}
	mmToSendMessageRequest.defaultExpectation.paramPtrs.req = &req
	mmToSendMessageRequest.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmToSendMessageRequest
}

// Inspect accepts an inspector function that has same arguments as the ServiceConverter.ToSendMessageRequest
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Inspect(f func(req *generated.SendMessageRequest)) *mServiceConverterMockToSendMessageRequest {
	if mmToSendMessageRequest.mock.inspectFuncToSendMessageRequest != nil {
		mmToSendMessageRequest.mock.t.Fatalf("Inspect function is already set for ServiceConverterMock.ToSendMessageRequest")
	}

	mmToSendMessageRequest.mock.inspectFuncToSendMessageRequest = f

	return mmToSendMessageRequest
}

// Return sets up results that will be returned by ServiceConverter.ToSendMessageRequest
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Return(sp1 *model.SendMessageRequest) *ServiceConverterMock {
	if mmToSendMessageRequest.mock.funcToSendMessageRequest != nil {
		mmToSendMessageRequest.mock.t.Fatalf("ServiceConverterMock.ToSendMessageRequest mock is already set by Set")
	}

	if mmToSendMessageRequest.defaultExpectation == nil {
		mmToSendMessageRequest.defaultExpectation = &ServiceConverterMockToSendMessageRequestExpectation{mock: mmToSendMessageRequest.mock}
	}
	mmToSendMessageRequest.defaultExpectation.results = &ServiceConverterMockToSendMessageRequestResults{sp1}
	mmToSendMessageRequest.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmToSendMessageRequest.mock
}

// Set uses given function f to mock the ServiceConverter.ToSendMessageRequest method
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Set(f func(req *generated.SendMessageRequest) (sp1 *model.SendMessageRequest)) *ServiceConverterMock {
	if mmToSendMessageRequest.defaultExpectation != nil {
		mmToSendMessageRequest.mock.t.Fatalf("Default expectation is already set for the ServiceConverter.ToSendMessageRequest method")
	}

	if len(mmToSendMessageRequest.expectations) > 0 {
		mmToSendMessageRequest.mock.t.Fatalf("Some expectations are already set for the ServiceConverter.ToSendMessageRequest method")
	}

	mmToSendMessageRequest.mock.funcToSendMessageRequest = f
	mmToSendMessageRequest.mock.funcToSendMessageRequestOrigin = minimock.CallerInfo(1)
	return mmToSendMessageRequest.mock
}

// When sets expectation for the ServiceConverter.ToSendMessageRequest which will trigger the result defined by the following
// Then helper
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) When(req *generated.SendMessageRequest) *ServiceConverterMockToSendMessageRequestExpectation {
	if mmToSendMessageRequest.mock.funcToSendMessageRequest != nil {
		mmToSendMessageRequest.mock.t.Fatalf("ServiceConverterMock.ToSendMessageRequest mock is already set by Set")
	}

	expectation := &ServiceConverterMockToSendMessageRequestExpectation{
		mock:               mmToSendMessageRequest.mock,
		params:             &ServiceConverterMockToSendMessageRequestParams{req},
		expectationOrigins: ServiceConverterMockToSendMessageRequestExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmToSendMessageRequest.expectations = append(mmToSendMessageRequest.expectations, expectation)
	return expectation
}

// Then sets up ServiceConverter.ToSendMessageRequest return parameters for the expectation previously defined by the When method
func (e *ServiceConverterMockToSendMessageRequestExpectation) Then(sp1 *model.SendMessageRequest) *ServiceConverterMock {
	e.results = &ServiceConverterMockToSendMessageRequestResults{sp1}
	return e.mock
}

// Times sets number of times ServiceConverter.ToSendMessageRequest should be invoked
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Times(n uint64) *mServiceConverterMockToSendMessageRequest {
	if n == 0 {
		mmToSendMessageRequest.mock.t.Fatalf("Times of ServiceConverterMock.ToSendMessageRequest mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmToSendMessageRequest.expectedInvocations, n)
	mmToSendMessageRequest.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmToSendMessageRequest
}

func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) invocationsDone() bool {
	if len(mmToSendMessageRequest.expectations) == 0 && mmToSendMessageRequest.defaultExpectation == nil && mmToSendMessageRequest.mock.funcToSendMessageRequest == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmToSendMessageRequest.mock.afterToSendMessageRequestCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmToSendMessageRequest.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ToSendMessageRequest implements mm_service.ServiceConverter
func (mmToSendMessageRequest *ServiceConverterMock) ToSendMessageRequest(req *generated.SendMessageRequest) (sp1 *model.SendMessageRequest) {
	mm_atomic.AddUint64(&mmToSendMessageRequest.beforeToSendMessageRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmToSendMessageRequest.afterToSendMessageRequestCounter, 1)

	mmToSendMessageRequest.t.Helper()

	if mmToSendMessageRequest.inspectFuncToSendMessageRequest != nil {
		mmToSendMessageRequest.inspectFuncToSendMessageRequest(req)
	}

	mm_params := ServiceConverterMockToSendMessageRequestParams{req}

	// Record call args
	mmToSendMessageRequest.ToSendMessageRequestMock.mutex.Lock()
	mmToSendMessageRequest.ToSendMessageRequestMock.callArgs = append(mmToSendMessageRequest.ToSendMessageRequestMock.callArgs, &mm_params)
	mmToSendMessageRequest.ToSendMessageRequestMock.mutex.Unlock()

	for _, e := range mmToSendMessageRequest.ToSendMessageRequestMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1
		}
	}

	if mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation.Counter, 1)
		mm_want := mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation.params
		mm_want_ptrs := mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation.paramPtrs

		mm_got := ServiceConverterMockToSendMessageRequestParams{req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmToSendMessageRequest.t.Errorf("ServiceConverterMock.ToSendMessageRequest got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmToSendMessageRequest.t.Errorf("ServiceConverterMock.ToSendMessageRequest got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmToSendMessageRequest.ToSendMessageRequestMock.defaultExpectation.results
		if mm_results == nil {
			mmToSendMessageRequest.t.Fatal("No results are set for the ServiceConverterMock.ToSendMessageRequest")
		}
		return (*mm_results).sp1
	}
	if mmToSendMessageRequest.funcToSendMessageRequest != nil {
		return mmToSendMessageRequest.funcToSendMessageRequest(req)
	}
	mmToSendMessageRequest.t.Fatalf("Unexpected call to ServiceConverterMock.ToSendMessageRequest. %v", req)
	return
}

// ToSendMessageRequestAfterCounter returns a count of finished ServiceConverterMock.ToSendMessageRequest invocations
func (mmToSendMessageRequest *ServiceConverterMock) ToSendMessageRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmToSendMessageRequest.afterToSendMessageRequestCounter)
}

// ToSendMessageRequestBeforeCounter returns a count of ServiceConverterMock.ToSendMessageRequest invocations
func (mmToSendMessageRequest *ServiceConverterMock) ToSendMessageRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmToSendMessageRequest.beforeToSendMessageRequestCounter)
}

// Calls returns a list of arguments used in each call to ServiceConverterMock.ToSendMessageRequest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmToSendMessageRequest *mServiceConverterMockToSendMessageRequest) Calls() []*ServiceConverterMockToSendMessageRequestParams {
	mmToSendMessageRequest.mutex.RLock()

	argCopy := make([]*ServiceConverterMockToSendMessageRequestParams, len(mmToSendMessageRequest.callArgs))
	copy(argCopy, mmToSendMessageRequest.callArgs)

	mmToSendMessageRequest.mutex.RUnlock()

	return argCopy
}

// MinimockToSendMessageRequestDone returns true if the count of the ToSendMessageRequest invocations corresponds
// the number of defined expectations
func (m *ServiceConverterMock) MinimockToSendMessageRequestDone() bool {
	if m.ToSendMessageRequestMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ToSendMessageRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ToSendMessageRequestMock.invocationsDone()
}

// MinimockToSendMessageRequestInspect logs each unmet expectation
func (m *ServiceConverterMock) MinimockToSendMessageRequestInspect() {
	for _, e := range m.ToSendMessageRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceConverterMock.ToSendMessageRequest at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterToSendMessageRequestCounter := mm_atomic.LoadUint64(&m.afterToSendMessageRequestCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ToSendMessageRequestMock.defaultExpectation != nil && afterToSendMessageRequestCounter < 1 {
		if m.ToSendMessageRequestMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ServiceConverterMock.ToSendMessageRequest at\n%s", m.ToSendMessageRequestMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ServiceConverterMock.ToSendMessageRequest at\n%s with params: %#v", m.ToSendMessageRequestMock.defaultExpectation.expectationOrigins.origin, *m.ToSendMessageRequestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcToSendMessageRequest != nil && afterToSendMessageRequestCounter < 1 {
		m.t.Errorf("Expected call to ServiceConverterMock.ToSendMessageRequest at\n%s", m.funcToSendMessageRequestOrigin)
	}

	if !m.ToSendMessageRequestMock.invocationsDone() && afterToSendMessageRequestCounter > 0 {
		m.t.Errorf("Expected %d calls to ServiceConverterMock.ToSendMessageRequest at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ToSendMessageRequestMock.expectedInvocations), m.ToSendMessageRequestMock.expectedInvocationsOrigin, afterToSendMessageRequestCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceConverterMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockToCreateRequestInspect()

			m.MinimockToSendMessageRequestInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceConverterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceConverterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockToCreateRequestDone() &&
		m.MinimockToSendMessageRequestDone()
}
